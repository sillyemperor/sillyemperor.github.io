<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>841BC</title><link href="https://sillyemperor.github.io/" rel="alternate"></link><link href="https://sillyemperor.github.io/feeds/all.atom.xml" rel="self"></link><id>https://sillyemperor.github.io/</id><updated>2019-06-04T00:00:00+02:00</updated><entry><title>阿里云磁盘挂载</title><link href="https://sillyemperor.github.io/a-li-yun-ci-pan-gua-zai.html" rel="alternate"></link><published>2019-06-04T00:00:00+02:00</published><updated>2019-06-04T00:00:00+02:00</updated><author><name>Wang Jiang</name></author><id>tag:sillyemperor.github.io,2019-06-04:/a-li-yun-ci-pan-gua-zai.html</id><summary type="html">&lt;p&gt;fdisk  -l
fdisk /dev/vdb         依次输入 n，p，1，两次回车，wq
mkfs.ext3 /dev/vdb1
echo /dev/vdb1 /mnt ext3 defaults 0 0 &amp;gt;&amp;gt; /etc/fstab
mount /dev/vdb1 /mnt
df -h&lt;/p&gt;
&lt;p&gt;按照上面这个顺序就可以完成挂载，具体命令的含义，可以自行搜索。&lt;/p&gt;</summary><content type="html">&lt;p&gt;fdisk  -l
fdisk /dev/vdb         依次输入 n，p，1，两次回车，wq
mkfs.ext3 /dev/vdb1
echo /dev/vdb1 /mnt ext3 defaults 0 0 &amp;gt;&amp;gt; /etc/fstab
mount /dev/vdb1 /mnt
df -h&lt;/p&gt;
&lt;p&gt;按照上面这个顺序就可以完成挂载，具体命令的含义，可以自行搜索。&lt;/p&gt;</content><category term="linux"></category></entry><entry><title>Geohash地理位置的唯一编码算法</title><link href="https://sillyemperor.github.io/geohashdi-li-wei-zhi-de-wei-yi-bian-ma-suan-fa.html" rel="alternate"></link><published>2019-06-04T00:00:00+02:00</published><updated>2019-06-04T00:00:00+02:00</updated><author><name>Wang Jiang</name></author><id>tag:sillyemperor.github.io,2019-06-04:/geohashdi-li-wei-zhi-de-wei-yi-bian-ma-suan-fa.html</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Geohash"&gt;Geohash&lt;/a&gt;是一种能够让经纬度和唯一字符串相互转换的算法。例如：可以用 ‘ ezs42’代表‘-5.60302734375, 42.60498046875’。该技术具备这样一种特性，字符串的长途和小数点后的位数成正比，也就是说，字符串越长精度越高。&lt;/p&gt;
&lt;p&gt;这个技术运行我们对一个位置进行带精度的比较，比如说：我们可以将一个点作为缓存的键值。&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Geohash"&gt;Geohash&lt;/a&gt;是一种能够让经纬度和唯一字符串相互转换的算法。例如：可以用 ‘ ezs42’代表‘-5.60302734375, 42.60498046875’。该技术具备这样一种特性，字符串的长途和小数点后的位数成正比，也就是说，字符串越长精度越高。&lt;/p&gt;
&lt;p&gt;这个技术运行我们对一个位置进行带精度的比较，比如说：我们可以将一个点作为缓存的键值。&lt;/p&gt;</content><category term="GIS"></category><category term="Geohash"></category></entry><entry><title>几种常用加密算法的比较</title><link href="https://sillyemperor.github.io/ji-chong-chang-yong-jia-mi-suan-fa-de-bi-jiao.html" rel="alternate"></link><published>2019-06-04T00:00:00+02:00</published><updated>2019-06-04T00:00:00+02:00</updated><author><name>Wang Jiang</name></author><id>tag:sillyemperor.github.io,2019-06-04:/ji-chong-chang-yong-jia-mi-suan-fa-de-bi-jiao.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;采用的机器&lt;/li&gt;
&lt;li&gt;型号名称：   MacBook Pro&lt;/li&gt;
&lt;li&gt;处理器名称：  Intel Core i5&lt;/li&gt;
&lt;li&gt;处理器速度：  3.1 GHz&lt;/li&gt;
&lt;li&gt;处理器数目：  1&lt;/li&gt;
&lt;li&gt;核总数：    2&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存： 8 GB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;采用的Java版本：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Java HotSpot(TM) 64-Bit Server VM (build 25.162-b12, mixed mode)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;处理5000次相同数据消耗的毫秒数&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;加密&lt;/th&gt;
&lt;th&gt;解密&lt;/th&gt;
&lt;th&gt;可逆&lt;/th&gt;
&lt;th&gt;对称密钥&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MD5&lt;/td&gt;
&lt;td&gt;151&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SHA-1&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SHA-256&lt;/td&gt;
&lt;td&gt;84&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AES&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;是 …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;采用的机器&lt;/li&gt;
&lt;li&gt;型号名称：   MacBook Pro&lt;/li&gt;
&lt;li&gt;处理器名称：  Intel Core i5&lt;/li&gt;
&lt;li&gt;处理器速度：  3.1 GHz&lt;/li&gt;
&lt;li&gt;处理器数目：  1&lt;/li&gt;
&lt;li&gt;核总数：    2&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存： 8 GB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;采用的Java版本：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Java HotSpot(TM) 64-Bit Server VM (build 25.162-b12, mixed mode)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;处理5000次相同数据消耗的毫秒数&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;加密&lt;/th&gt;
&lt;th&gt;解密&lt;/th&gt;
&lt;th&gt;可逆&lt;/th&gt;
&lt;th&gt;对称密钥&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MD5&lt;/td&gt;
&lt;td&gt;151&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SHA-1&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SHA-256&lt;/td&gt;
&lt;td&gt;84&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AES&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DES&lt;/td&gt;
&lt;td&gt;77&lt;/td&gt;
&lt;td&gt;122&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RSA&lt;/td&gt;
&lt;td&gt;1265&lt;/td&gt;
&lt;td&gt;25120&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以看到可逆的算法比不可逆的执行效率低，非对称比对称的执行效率低。不可逆算法适合来对数据进行签名，可以实现防篡改功能。可逆算法适合加密传输，可以用对称和非对称结合实现最好的效果。著名的HTTPS协议就采用非对称加密对传输密钥进行加密，而采用对称算法进行数据加密，这样效率较低的非对称算法只在握手的时候执行一次，即不会对后面的数据传输产生影响，又保证了极好的安全性。&lt;/p&gt;
&lt;p&gt;在算法选择上，MD5已经过时了，可以采用性能和安全性都更好的SHA-256。对称加密采用AES。&lt;/p&gt;</content><category term="MD5"></category><category term="SHA"></category><category term="AES"></category></entry><entry><title>几种Python Web Framework性能比较</title><link href="https://sillyemperor.github.io/ji-chong-python-web-frameworkxing-neng-bi-jiao.html" rel="alternate"></link><published>2019-06-04T00:00:00+02:00</published><updated>2019-06-04T00:00:00+02:00</updated><author><name>Wang Jiang</name></author><id>tag:sillyemperor.github.io,2019-06-04:/ji-chong-python-web-frameworkxing-neng-bi-jiao.html</id><summary type="html">&lt;p&gt;参与比较的Python框架有：tornado,flask,falcon,bottle,djiango&lt;/p&gt;
&lt;p&gt;测试采用ab命令。&lt;/p&gt;
&lt;p&gt;操作系统是：CentOS  7.2 64位。&lt;/p&gt;
&lt;p&gt;硬件指标：CPU： 4核    内存：8 GB。&lt;/p&gt;
&lt;p&gt;测试时使用2核。&lt;/p&gt;
&lt;p&gt;容器采用uwsgi和gunicorn&lt;/p&gt;
&lt;p&gt;Python采用CPython2.7和pypy5.0。&lt;/p&gt;
&lt;p&gt;测试代码下相应GET请求返回文字“Hello World”，没有模板，没有数据库请求等额外开销。&lt;/p&gt;
&lt;p&gt;测试结果：&lt;/p&gt;
&lt;p&gt;测试脚本“ab -n 1000 -c 100 http://192.168.0.102:9090/”
&lt;img alt="1000" src="/images/ab-n1000.png"&gt;
测试脚本“ab -n 10000 -c 100 http://192.168 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;参与比较的Python框架有：tornado,flask,falcon,bottle,djiango&lt;/p&gt;
&lt;p&gt;测试采用ab命令。&lt;/p&gt;
&lt;p&gt;操作系统是：CentOS  7.2 64位。&lt;/p&gt;
&lt;p&gt;硬件指标：CPU： 4核    内存：8 GB。&lt;/p&gt;
&lt;p&gt;测试时使用2核。&lt;/p&gt;
&lt;p&gt;容器采用uwsgi和gunicorn&lt;/p&gt;
&lt;p&gt;Python采用CPython2.7和pypy5.0。&lt;/p&gt;
&lt;p&gt;测试代码下相应GET请求返回文字“Hello World”，没有模板，没有数据库请求等额外开销。&lt;/p&gt;
&lt;p&gt;测试结果：&lt;/p&gt;
&lt;p&gt;测试脚本“ab -n 1000 -c 100 http://192.168.0.102:9090/”
&lt;img alt="1000" src="/images/ab-n1000.png"&gt;
测试脚本“ab -n 10000 -c 100 http://192.168.0.102:9090/”
&lt;img alt="1000" src="/images/ab-n10000.png"&gt;
其中没有结果的是测试数据没有完成就断开连接了。&lt;/p&gt;
&lt;p&gt;结论：性能最好的组合是falcon+gunicorn+pypy。该组合适合用于实现微服务。django虽然在性能上不是最优但是作为功能最完整的框架依然适合中大型应用的开发。tornado还没有在实际应用中使用过，有了解的朋友请补充一下。&lt;/p&gt;</content><category term="Python"></category><category term="tornado"></category><category term="flask"></category><category term="falcon"></category><category term="bottle"></category><category term="djiango"></category><category term="ab"></category></entry><entry><title>经纬度转WebMercator坐标</title><link href="https://sillyemperor.github.io/jing-wei-du-zhuan-webmercatorzuo-biao.html" rel="alternate"></link><published>2019-06-04T00:00:00+02:00</published><updated>2019-06-04T00:00:00+02:00</updated><author><name>Wang Jiang</name></author><id>tag:sillyemperor.github.io,2019-06-04:/jing-wei-du-zhuan-webmercatorzuo-biao.html</id><summary type="html">&lt;p&gt;输入x_lon,y_lat&lt;/p&gt;
&lt;p&gt;输出x_mercator，y_mercator&lt;/p&gt;
&lt;p&gt;num = x_lon * 0.017453292519943295        &lt;br&gt;
 x = 6378137.0 * num        &lt;br&gt;
 a = y_lat * 0.017453292519943295        &lt;br&gt;
 x_mercator = x       &lt;br&gt;
 y_mercator = 3189068.5 * math.log((1.0 + math.sin(a)) / (1.0 - math.sin(a)))&lt;/p&gt;</summary><content type="html">&lt;p&gt;输入x_lon,y_lat&lt;/p&gt;
&lt;p&gt;输出x_mercator，y_mercator&lt;/p&gt;
&lt;p&gt;num = x_lon * 0.017453292519943295        &lt;br&gt;
 x = 6378137.0 * num        &lt;br&gt;
 a = y_lat * 0.017453292519943295        &lt;br&gt;
 x_mercator = x       &lt;br&gt;
 y_mercator = 3189068.5 * math.log((1.0 + math.sin(a)) / (1.0 - math.sin(a)))&lt;/p&gt;</content><category term="GIS"></category><category term="WebMercator"></category><category term="经纬度"></category></entry><entry><title>MVN发布本地jar</title><link href="https://sillyemperor.github.io/mvnfa-bu-ben-di-jar.html" rel="alternate"></link><published>2019-06-04T00:00:00+02:00</published><updated>2019-06-04T00:00:00+02:00</updated><author><name>Wang Jiang</name></author><id>tag:sillyemperor.github.io,2019-06-04:/mvnfa-bu-ben-di-jar.html</id><summary type="html">&lt;p&gt;mvn deploy:deploy-file -DgroupId=net.xmlerlimin -DartifactId=net.sourceforge.pinyin4j -Dversion=2.5.0 -Dpackaging=jar -Dfile=./lib/pinyin4j-2.5.0.jar -DrepositoryId=账户 -Durl=http://私库服务器/nexus/content/repositories/thirdparty/&lt;/p&gt;</summary><content type="html">&lt;p&gt;mvn deploy:deploy-file -DgroupId=net.xmlerlimin -DartifactId=net.sourceforge.pinyin4j -Dversion=2.5.0 -Dpackaging=jar -Dfile=./lib/pinyin4j-2.5.0.jar -DrepositoryId=账户 -Durl=http://私库服务器/nexus/content/repositories/thirdparty/&lt;/p&gt;</content><category term="Java"></category><category term="mvn"></category></entry><entry><title>Nginx过滤了带下划线的自定义Header</title><link href="https://sillyemperor.github.io/nginxguo-lu-liao-dai-xia-hua-xian-de-zi-ding-yi-header.html" rel="alternate"></link><published>2019-06-04T00:00:00+02:00</published><updated>2019-06-04T00:00:00+02:00</updated><author><name>Wang Jiang</name></author><id>tag:sillyemperor.github.io,2019-06-04:/nginxguo-lu-liao-dai-xia-hua-xian-de-zi-ding-yi-header.html</id><summary type="html">&lt;p&gt;服务的需要一个自定义的header，'my_header'，选择'&lt;em&gt;'而不是'-'的原因就不在这里讨论了。通过nginx反向代理后，传到服务端，'my_header'不见了。问了一下Bing（没用谷歌，也没用Baidu），结果发现nginx里有一个 开关，' underscores_in_headers'，设置为‘off’就会拦截所有带'&lt;/em&gt;'的header，设置为‘on’就放过。缺省是‘off’。所以只要在http或者server中设置一下就好了。&lt;/p&gt;</summary><content type="html">&lt;p&gt;服务的需要一个自定义的header，'my_header'，选择'&lt;em&gt;'而不是'-'的原因就不在这里讨论了。通过nginx反向代理后，传到服务端，'my_header'不见了。问了一下Bing（没用谷歌，也没用Baidu），结果发现nginx里有一个 开关，' underscores_in_headers'，设置为‘off’就会拦截所有带'&lt;/em&gt;'的header，设置为‘on’就放过。缺省是‘off’。所以只要在http或者server中设置一下就好了。&lt;/p&gt;</content><category term="Nginx"></category></entry><entry><title>Nginx实现双向认证，直接上脚本，想学习更多的看参考</title><link href="https://sillyemperor.github.io/nginxshi-xian-shuang-xiang-ren-zheng-zhi-jie-shang-jiao-ben-xiang-xue-xi-geng-duo-de-kan-can-kao.html" rel="alternate"></link><published>2019-06-04T00:00:00+02:00</published><updated>2019-06-04T00:00:00+02:00</updated><author><name>Wang Jiang</name></author><id>tag:sillyemperor.github.io,2019-06-04:/nginxshi-xian-shuang-xiang-ren-zheng-zhi-jie-shang-jiao-ben-xiang-xue-xi-geng-duo-de-kan-can-kao.html</id><summary type="html">&lt;p&gt;第一步、创建证书&lt;/p&gt;
&lt;p&gt;//创建根证书root&lt;/p&gt;
&lt;p&gt;openssl genrsa -des3 -out root.key 4096&lt;/p&gt;
&lt;p&gt;openssl req -new -x509 -days 3650 -key root.key -out root.crt&lt;/p&gt;
&lt;p&gt;//创建服务器证书server&lt;/p&gt;
&lt;p&gt;openssl genrsa -des3 -out server.key 1024
openssl req -new -key server.key -out server.csr 
openssl x509 -req -days 3560 -in server.csr  -CA root.crt …&lt;/p&gt;</summary><content type="html">&lt;p&gt;第一步、创建证书&lt;/p&gt;
&lt;p&gt;//创建根证书root&lt;/p&gt;
&lt;p&gt;openssl genrsa -des3 -out root.key 4096&lt;/p&gt;
&lt;p&gt;openssl req -new -x509 -days 3650 -key root.key -out root.crt&lt;/p&gt;
&lt;p&gt;//创建服务器证书server&lt;/p&gt;
&lt;p&gt;openssl genrsa -des3 -out server.key 1024
openssl req -new -key server.key -out server.csr 
openssl x509 -req -days 3560 -in server.csr  -CA root.crt  -CAkey root.key -set_serial 01 -out server.crt&lt;/p&gt;
&lt;p&gt;//创建乘客端证书client&lt;/p&gt;
&lt;p&gt;openssl genrsa -des3 -out client.key 1024
openssl req -new -key client.key -out client.csr 
openssl x509 -req -days 3560 -in client.csr  -CA root.crt  -CAkey root.key -set_serial 01 -out client.crt&lt;/p&gt;
&lt;p&gt;第二步、配置服务器&lt;/p&gt;
&lt;p&gt;//配置Nginx&lt;/p&gt;
&lt;p&gt;server {
        listen       443 ssl;
        server_name  localhost www.test.net;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;ssl&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ssl_certificate&lt;/span&gt;      &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;路径&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cert&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ssl_certificate_key&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;路径&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cert&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;ssl_client_certificate&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;路径&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cert&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ssl_verify_client&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;root&lt;/span&gt;   &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;index&lt;/span&gt;  &lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重新启动nginx后，服务器就配置好了。下面说说几种客户端如何访问。&lt;/p&gt;
&lt;p&gt;第三步、客户端调用&lt;/p&gt;
&lt;p&gt;假设我们的访问链接就是：https://www.test.net。&lt;/p&gt;
&lt;p&gt;为了方便使用，将客户端证书与密钥打包。&lt;/p&gt;
&lt;p&gt;//打包脚本&lt;/p&gt;
&lt;p&gt;openssl pkcs12 -export -clcerts -in client.crt -inkey client.key -out client.p12&lt;/p&gt;
&lt;p&gt;//curl&lt;/p&gt;
&lt;p&gt;curl -Sv --cert client.p12:client.key的密码  -k https://www.test.net&lt;/p&gt;
&lt;p&gt;//Python，使用了 requests，会要求输入client.key的密码 &lt;/p&gt;
&lt;p&gt;import requests
requests.get('https://www.test.net', verify=False, cert=('client.crt', 'client.key'))&lt;/p&gt;
&lt;p&gt;//使用requests_pkcs12&lt;/p&gt;
&lt;p&gt;from requests_pkcs12 import get
r = get('https://www.test.net', pkcs12_filename='client.p12', pkcs12_password='client.key的密码', verify=False)&lt;/p&gt;
&lt;p&gt;此外，这个打包文件还可以直接载入浏览器。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;http://blog.nategood.com/client-side-certificate-authentication-in-ngi&lt;/p&gt;</content><category term="nginx"></category><category term="https"></category><category term="openssl"></category><category term="证书"></category></entry><entry><title>Python数组复制的陷阱</title><link href="https://sillyemperor.github.io/pythonshu-zu-fu-zhi-de-xian-jing.html" rel="alternate"></link><published>2019-06-04T00:00:00+02:00</published><updated>2019-06-04T00:00:00+02:00</updated><author><name>Wang Jiang</name></author><id>tag:sillyemperor.github.io,2019-06-04:/pythonshu-zu-fu-zhi-de-xian-jing.html</id><summary type="html">&lt;p&gt;说是陷阱其实有点标题党，其实是最近的一次DEBUG结果。先看代码：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;a=[1]*5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;[1,1,1,1,1]&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;a[0]=2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;[2,1,1,1,1]&lt;/p&gt;
&lt;p&gt;这段代码的含义是复制了5个‘1’作为数组，修改其中一个元素后的结果。没毛病。但是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;b=[[1]&lt;em&gt;2]&lt;/em&gt;2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;[[1,1],[1,1]]&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;b[0][0]=2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;[[2,1],[2,1]]&lt;/p&gt;
&lt;p&gt;WTF！这显然不是我们想要的结果。其实问题也很简单，[object]*n=[object,object,...object]，也就是说复制的是对象的引用而不是值复制 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;说是陷阱其实有点标题党，其实是最近的一次DEBUG结果。先看代码：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;a=[1]*5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;[1,1,1,1,1]&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;a[0]=2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;[2,1,1,1,1]&lt;/p&gt;
&lt;p&gt;这段代码的含义是复制了5个‘1’作为数组，修改其中一个元素后的结果。没毛病。但是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;b=[[1]&lt;em&gt;2]&lt;/em&gt;2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;[[1,1],[1,1]]&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;b[0][0]=2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;[[2,1],[2,1]]&lt;/p&gt;
&lt;p&gt;WTF！这显然不是我们想要的结果。其实问题也很简单，[object]*n=[object,object,...object]，也就是说复制的是对象的引用而不是值复制。例如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;o=object()&lt;/p&gt;
&lt;p&gt;[o]*2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;object object at 0x1083a7090&gt;, &lt;object object at 0x1083a7090&gt;]&lt;/p&gt;
&lt;p&gt;可以看到，其实是同一个对象。&lt;/p&gt;</content><category term="Python"></category></entry><entry><title>用systemctl管理nginx服务实现自动启动</title><link href="https://sillyemperor.github.io/yong-systemctlguan-li-nginxfu-wu-shi-xian-zi-dong-qi-dong.html" rel="alternate"></link><published>2019-06-04T00:00:00+02:00</published><updated>2019-06-04T00:00:00+02:00</updated><author><name>Wang Jiang</name></author><id>tag:sillyemperor.github.io,2019-06-04:/yong-systemctlguan-li-nginxfu-wu-shi-xian-zi-dong-qi-dong.html</id><summary type="html">&lt;p&gt;创建文件&lt;/p&gt;
&lt;p&gt;/lib/systemd/system/nginx.service&lt;/p&gt;
&lt;p&gt;[Unit]&lt;/p&gt;
&lt;p&gt;Description=The NGINX HTTP and reverse proxy server&lt;/p&gt;
&lt;p&gt;After=syslog.target network.target remote-fs.target nss-lookup.target&lt;/p&gt;
&lt;p&gt;[Service]&lt;/p&gt;
&lt;p&gt;Type=forking&lt;/p&gt;
&lt;p&gt;PIDFile=/run/nginx.pid&lt;/p&gt;
&lt;p&gt;ExecStartPre=/usr/sbin/nginx -t&lt;/p&gt;
&lt;p&gt;ExecStart=/usr/sbin/nginx&lt;/p&gt;
&lt;p&gt;ExecReload=/usr/sbin/nginx -s reload&lt;/p&gt;
&lt;p&gt;ExecStop=/bin/kill -s …&lt;/p&gt;</summary><content type="html">&lt;p&gt;创建文件&lt;/p&gt;
&lt;p&gt;/lib/systemd/system/nginx.service&lt;/p&gt;
&lt;p&gt;[Unit]&lt;/p&gt;
&lt;p&gt;Description=The NGINX HTTP and reverse proxy server&lt;/p&gt;
&lt;p&gt;After=syslog.target network.target remote-fs.target nss-lookup.target&lt;/p&gt;
&lt;p&gt;[Service]&lt;/p&gt;
&lt;p&gt;Type=forking&lt;/p&gt;
&lt;p&gt;PIDFile=/run/nginx.pid&lt;/p&gt;
&lt;p&gt;ExecStartPre=/usr/sbin/nginx -t&lt;/p&gt;
&lt;p&gt;ExecStart=/usr/sbin/nginx&lt;/p&gt;
&lt;p&gt;ExecReload=/usr/sbin/nginx -s reload&lt;/p&gt;
&lt;p&gt;ExecStop=/bin/kill -s QUIT $MAINPID&lt;/p&gt;
&lt;p&gt;PrivateTmp=true&lt;/p&gt;
&lt;p&gt;[Install]&lt;/p&gt;
&lt;p&gt;WantedBy=multi-user.target&lt;/p&gt;
&lt;p&gt;启动项目&lt;/p&gt;
&lt;p&gt;systemctl enable nginx.service&lt;/p&gt;
&lt;p&gt;systemctl start nginx.service&lt;/p&gt;
&lt;p&gt;查看项目状态&lt;/p&gt;
&lt;p&gt;systemctl status nginx.service&lt;/p&gt;
&lt;p&gt;Reload项目&lt;/p&gt;
&lt;p&gt;systemctl reload nginx.service&lt;/p&gt;
&lt;p&gt;Restart项目&lt;/p&gt;
&lt;p&gt;systemctl restart nginx.service&lt;/p&gt;</content><category term="nignx"></category><category term="systemctl"></category></entry></feed>