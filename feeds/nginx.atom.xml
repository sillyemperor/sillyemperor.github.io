<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>841BC - Nginx</title><link href="http://p.841bc.net/" rel="alternate"></link><link href="http://p.841bc.net/feeds/nginx.atom.xml" rel="self"></link><id>http://p.841bc.net/</id><updated>2019-06-04T00:00:00+02:00</updated><entry><title>加密算法比较</title><link href="http://p.841bc.net/nginx-client-cert.html" rel="alternate"></link><published>2019-06-04T00:00:00+02:00</published><updated>2019-06-04T00:00:00+02:00</updated><author><name>wj</name></author><id>tag:p.841bc.net,2019-06-04:/nginx-client-cert.html</id><summary type="html">&lt;p&gt;几种常用加密算法的比较&lt;/p&gt;</summary><content type="html">&lt;h4&gt;Nginx实现双向认证，直接上脚本，想学习更多的看参考。&lt;/h4&gt;
&lt;p&gt;第一步、创建证书&lt;/p&gt;
&lt;p&gt;//创建根证书root&lt;/p&gt;
&lt;p&gt;openssl genrsa -des3 -out root.key 4096&lt;/p&gt;
&lt;p&gt;openssl req -new -x509 -days 3650 -key root.key -out root.crt&lt;/p&gt;
&lt;p&gt;//创建服务器证书server&lt;/p&gt;
&lt;p&gt;openssl genrsa -des3 -out server.key 1024
openssl req -new -key server.key -out server.csr 
openssl x509 -req -days 3560 -in server.csr  -CA root.crt  -CAkey root.key -set_serial 01 -out server.crt&lt;/p&gt;
&lt;p&gt;//创建乘客端证书client&lt;/p&gt;
&lt;p&gt;openssl genrsa -des3 -out client.key 1024
openssl req -new -key client.key -out client.csr 
openssl x509 -req -days 3560 -in client.csr  -CA root.crt  -CAkey root.key -set_serial 01 -out client.crt&lt;/p&gt;
&lt;p&gt;第二步、配置服务器&lt;/p&gt;
&lt;p&gt;//配置Nginx&lt;/p&gt;
&lt;p&gt;server {
        listen       443 ssl;
        server_name  localhost www.test.net;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;ssl&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ssl_certificate&lt;/span&gt;      &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;路径&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cert&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ssl_certificate_key&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;路径&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cert&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;ssl_client_certificate&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;路径&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cert&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ssl_verify_client&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;root&lt;/span&gt;   &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;index&lt;/span&gt;  &lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重新启动nginx后，服务器就配置好了。下面说说几种客户端如何访问。&lt;/p&gt;
&lt;p&gt;第三步、客户端调用&lt;/p&gt;
&lt;p&gt;假设我们的访问链接就是：https://www.test.net。&lt;/p&gt;
&lt;p&gt;为了方便使用，将客户端证书与密钥打包。&lt;/p&gt;
&lt;p&gt;//打包脚本&lt;/p&gt;
&lt;p&gt;openssl pkcs12 -export -clcerts -in client.crt -inkey client.key -out client.p12&lt;/p&gt;
&lt;p&gt;//curl&lt;/p&gt;
&lt;p&gt;curl -Sv --cert client.p12:client.key的密码  -k https://www.test.net&lt;/p&gt;
&lt;p&gt;//Python，使用了 requests，会要求输入client.key的密码 &lt;/p&gt;
&lt;p&gt;import requests
requests.get('https://www.test.net', verify=False, cert=('client.crt', 'client.key'))&lt;/p&gt;
&lt;p&gt;//使用requests_pkcs12&lt;/p&gt;
&lt;p&gt;from requests_pkcs12 import get
r = get('https://www.test.net', pkcs12_filename='client.p12', pkcs12_password='client.key的密码', verify=False)&lt;/p&gt;
&lt;p&gt;此外，这个打包文件还可以直接载入浏览器。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;http://blog.nategood.com/client-side-certificate-authentication-in-ngi&lt;/p&gt;</content><category term="nginx"></category><category term="https"></category><category term="openssl"></category><category term="证书"></category></entry></feed>