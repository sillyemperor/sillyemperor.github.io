<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>841BC - Python</title><link href="https://sillyemperor.github.io/" rel="alternate"></link><link href="https://sillyemperor.github.io/feeds/python.atom.xml" rel="self"></link><id>https://sillyemperor.github.io/</id><updated>2019-06-04T00:00:00+02:00</updated><entry><title>几种Python Web Framework性能比较</title><link href="https://sillyemperor.github.io/ji-chong-python-web-frameworkxing-neng-bi-jiao.html" rel="alternate"></link><published>2019-06-04T00:00:00+02:00</published><updated>2019-06-04T00:00:00+02:00</updated><author><name>Wang Jiang</name></author><id>tag:sillyemperor.github.io,2019-06-04:/ji-chong-python-web-frameworkxing-neng-bi-jiao.html</id><summary type="html">&lt;p&gt;参与比较的Python框架有：tornado,flask,falcon,bottle,djiango&lt;/p&gt;
&lt;p&gt;测试采用ab命令。&lt;/p&gt;
&lt;p&gt;操作系统是：CentOS  7.2 64位。&lt;/p&gt;
&lt;p&gt;硬件指标：CPU： 4核    内存：8 GB。&lt;/p&gt;
&lt;p&gt;测试时使用2核。&lt;/p&gt;
&lt;p&gt;容器采用uwsgi和gunicorn&lt;/p&gt;
&lt;p&gt;Python采用CPython2.7和pypy5.0。&lt;/p&gt;
&lt;p&gt;测试代码下相应GET请求返回文字“Hello World”，没有模板，没有数据库请求等额外开销。&lt;/p&gt;
&lt;p&gt;测试结果：&lt;/p&gt;
&lt;p&gt;测试脚本“ab -n 1000 -c 100 http://192.168.0.102:9090/”
&lt;img alt="1000" src="/images/ab-n1000.png"&gt;
测试脚本“ab -n 10000 -c 100 http://192.168 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;参与比较的Python框架有：tornado,flask,falcon,bottle,djiango&lt;/p&gt;
&lt;p&gt;测试采用ab命令。&lt;/p&gt;
&lt;p&gt;操作系统是：CentOS  7.2 64位。&lt;/p&gt;
&lt;p&gt;硬件指标：CPU： 4核    内存：8 GB。&lt;/p&gt;
&lt;p&gt;测试时使用2核。&lt;/p&gt;
&lt;p&gt;容器采用uwsgi和gunicorn&lt;/p&gt;
&lt;p&gt;Python采用CPython2.7和pypy5.0。&lt;/p&gt;
&lt;p&gt;测试代码下相应GET请求返回文字“Hello World”，没有模板，没有数据库请求等额外开销。&lt;/p&gt;
&lt;p&gt;测试结果：&lt;/p&gt;
&lt;p&gt;测试脚本“ab -n 1000 -c 100 http://192.168.0.102:9090/”
&lt;img alt="1000" src="/images/ab-n1000.png"&gt;
测试脚本“ab -n 10000 -c 100 http://192.168.0.102:9090/”
&lt;img alt="1000" src="/images/ab-n10000.png"&gt;
其中没有结果的是测试数据没有完成就断开连接了。&lt;/p&gt;
&lt;p&gt;结论：性能最好的组合是falcon+gunicorn+pypy。该组合适合用于实现微服务。django虽然在性能上不是最优但是作为功能最完整的框架依然适合中大型应用的开发。tornado还没有在实际应用中使用过，有了解的朋友请补充一下。&lt;/p&gt;</content><category term="Python"></category><category term="tornado"></category><category term="flask"></category><category term="falcon"></category><category term="bottle"></category><category term="djiango"></category><category term="ab"></category></entry><entry><title>Python数组复制的陷阱</title><link href="https://sillyemperor.github.io/pythonshu-zu-fu-zhi-de-xian-jing.html" rel="alternate"></link><published>2019-06-04T00:00:00+02:00</published><updated>2019-06-04T00:00:00+02:00</updated><author><name>Wang Jiang</name></author><id>tag:sillyemperor.github.io,2019-06-04:/pythonshu-zu-fu-zhi-de-xian-jing.html</id><summary type="html">&lt;p&gt;说是陷阱其实有点标题党，其实是最近的一次DEBUG结果。先看代码：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;a=[1]*5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;[1,1,1,1,1]&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;a[0]=2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;[2,1,1,1,1]&lt;/p&gt;
&lt;p&gt;这段代码的含义是复制了5个‘1’作为数组，修改其中一个元素后的结果。没毛病。但是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;b=[[1]&lt;em&gt;2]&lt;/em&gt;2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;[[1,1],[1,1]]&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;b[0][0]=2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;[[2,1],[2,1]]&lt;/p&gt;
&lt;p&gt;WTF！这显然不是我们想要的结果。其实问题也很简单，[object]*n=[object,object,...object]，也就是说复制的是对象的引用而不是值复制 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;说是陷阱其实有点标题党，其实是最近的一次DEBUG结果。先看代码：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;a=[1]*5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;[1,1,1,1,1]&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;a[0]=2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;[2,1,1,1,1]&lt;/p&gt;
&lt;p&gt;这段代码的含义是复制了5个‘1’作为数组，修改其中一个元素后的结果。没毛病。但是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;b=[[1]&lt;em&gt;2]&lt;/em&gt;2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;[[1,1],[1,1]]&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;b[0][0]=2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;[[2,1],[2,1]]&lt;/p&gt;
&lt;p&gt;WTF！这显然不是我们想要的结果。其实问题也很简单，[object]*n=[object,object,...object]，也就是说复制的是对象的引用而不是值复制。例如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;o=object()&lt;/p&gt;
&lt;p&gt;[o]*2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;object object at 0x1083a7090&gt;, &lt;object object at 0x1083a7090&gt;]&lt;/p&gt;
&lt;p&gt;可以看到，其实是同一个对象。&lt;/p&gt;</content><category term="Python"></category></entry></feed>